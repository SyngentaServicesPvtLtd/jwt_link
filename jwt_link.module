<?php
/*
* NUMBERED ITEMS (n) BASED ON
* https://tools.ietf.org/html/draft-ietf-oauth-jwt-bearer-12#section-1.2
*/

//CHECK THE README FOR INFORMATION ABOUT THIS REQUIRE LINE
require_once 'JWT/Authentication/JWT.php';

global $user;
$anon = "anon";


//(1) REQUIRED::ISSUER
$iss = variable_get('jwt_link_iss', '');


//(2) REQUIRED::SUBJECT
//IF ITS AN OBJ IT LOADED FROM DREW PAUL :: ANON IF NOT OBJ OR NAME IS NULL
$sub = is_object($user) ? (is_null($user->name) ? $anon : $user->name) : $anon;

//(3) REQUIRED::AUDIENCE / AUTHORIZATION SERVER
$aud = variable_get('jwt_link_aud', '');


//WHERE TO GO, NOT REQUIRED IN FN
$link_url = variable_get('jwt_link_url', '');


//KEY, NOT REQUIRED IN FN
$key = variable_get('jwt_link_key', '');

//ALG, NOT REQUIRED IN FN
$alg = variable_get('jwt_link_alg', '');

if (!($sub == $anon)) {
  print jwt_link_url($iss, $sub, $aud, $alg, $key, $link_url);
}


/*#####################################################
* Implementation of hook_help
* ####################################################
*/
function jwt_link_help($path, $arg) {
  //creating a help hook
  $output = "";
  switch ($path) {
    case "admin/help#jwt_link":
      $output = "<p>" . t("Provides JWT encoded URL.") . "</p>";
      break;
  }
  return $output;
}

/*#####################################################
* Implementation of hook_perm
* ####################################################
*/
function jwt_link_perm() {
  //setting module permissions
  return array('access jwtlink settings');
}

/*#####################################################
* Implementation of hook_menu
* ####################################################
*/
function jwt_link_menu() {
  $items = array();
  $items['admin/build/jwtlink'] = array(
    'title'            => "JWT Link",
    'description'      => "Various field for generating JWT Encoded URL.",
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('jwt_link_admin'),
    'access arguments' => array('access jwtlink settings'),
    'type'             => MENU_NORMAL_ITEM,
  );

  return $items;
}

/*#####################################################
* Implementation of hook_admin
* ####################################################
*/
function jwt_link_admin() {
  $form = array();

  $form['jwt_link_iss'] = array(
    '#type'          => 'textfield',
    '#title'         => "Issuer",
    '#default_value' => variable_get('jwt_link_iss', ''),
    '#size'          => 100,
    '#description'   => "Site URL issuing the token. It will very likely be this site. E.g. http://mysite.com",
  );

  $form['jwt_link_aud'] = array(
    '#type'          => 'textfield',
    '#title'         => "Audience / Authorization Server",
    '#default_value' => variable_get('jwt_link_aud', ''),
    '#size'          => 100,
    '#description'   => "Site URL authorizing the generated token the token. Remote server e.g. http://siteauthorizingthis.com",
  );

  $form['jwt_link_url'] = array(
    '#type'          => 'textfield',
    '#title'         => "URL / Link To",
    '#default_value' => variable_get('jwt_link_url', ''),
    '#size'          => 100,
    '#description'   => "Site URL to link to. It will likely be the same domain of the Audience / Authorization server e.g. http://siteauthorizingthis.com/some/path",
  );

  $form['jwt_link_key'] = array(
    '#type'          => 'textfield',
    '#title'         => "Key",
    '#default_value' => variable_get('jwt_link_key', ''),
    '#size'          => 100,
    '#description'   => "Some key or random string for encrypting the data.",
  );

  $form['jwt_link_alg'] = array(
    '#title'         => t("Encryption Algorithm"),
    '#type'          => 'select',
    '#options'       => array(
      'HS256' => 'HS256',
      'HS512' => 'HS512',
      'HS384' => 'HS384',
    ),
    '#default_value' => variable_get('jwt_link_alg', 'HS256'),
    '#description'   => "Which algorithm for encryption. Default HS256.",
  );


return system_settings_form($form);
}


/***
 * @param $iss
 * @param $sub
 * @param $aud
 * @param null $link_url
 * @return string
 */
function jwt_link_url($iss, $sub, $aud, $alg, $key, $link_url) {
  //(4) REQUIRED::EXPIRATION
  //(5) OPTIONAL::ISSUED AT
  //(6) OPTIONAL::NOT BEFORE
  $nbf = $iat = time();
  $exp = $nbf + (60 * 3); //3 MINUTE EXPIRATION

  $token = array(
    "iss" => $iss,
    "sub" => $sub,
    "aud" => $aud,
    "exp" => $exp,
    "iat" => $iat,
    "nbf" => $nbf,
  );

  //JWT CAN BE DECODED TO FOR DEBUG/SANITY LOOK AT CLASS
  $jwt = JWT::encode($token, $key, $alg); //COULD PASS 4th PARAM of KEYID

  return "{$link_url}?jwt={$jwt}";
}

